{
    "contents" : "## Put comments here that give an overall description of what your\n## functions do\n\n## Write a short comment describing this function\n##copying makeVector and cachemean to test it\nmakeVector <- function(x = numeric()) {\n      m <- NULL\n      set <- function(y) {\n            x <<- y\n            m <<- NULL\n      }\n      get <- function() x\n      setmean <- function(mean) m <<- mean\n      getmean <- function() m\n      list(set = set, get = get,\n           setmean = setmean,\n           getmean = getmean)\n}\n\n##output of make vecor is returned to cachemean\ncachemean <- function(x, ...) {\n      m <- x$getmean()\n      if(!is.null(m)) {\n            message(\"getting cached data\")\n            return(m)\n      }\n      data <- x$get()\n      m <- mean(data, ...)\n      x$setmean(m)\n      m\n}\n\nmakeCacheMatrix <- function(x = matrix()) {\n      m <- NULL\n      set <- function(y) {\n            x <<- y\n            m <<- NULL\n      }\n      get <- function() x\n      setinverse <- function(solve) m <<- solve\n      getinverse <- function() m\n      list(set = set, get = get,\n           setinverse = setinverse,\n           getinverse = getinverse)   \n\n}\n\n\n## Write a short comment describing this function\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n      m <- x$getinverse()\n      if(!is.null(m)) {\n            message(\"getting cached data\")\n            return(m)\n      }\n      data <- x$get()\n      m <- solve(data, ...)\n      x$setinverse(m)\n      m\n}\n",
    "created" : 1437916428392.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1764923918",
    "id" : "AC8D9B37",
    "lastKnownWriteTime" : 1437919607,
    "path" : "C:/Users/vi305655/programmingassignment2-1/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : true,
    "type" : "r_source"
}